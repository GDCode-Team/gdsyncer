@tool
extends EditorPlugin


# const SERVER_ADDRESS: String = "gdsyncer/server_settings/host"
# const SERVER_ADDRESS_DEFAULT: String = "0.0.0.0:8008"

# const SERVER_PASSWORD: String = "gdsyncer/server_settings/password"
# const SERVER_PASSWORD_DEFAULT: String = ""

# const MainPanel = preload("res://addons/GDSyncer/scenes/main_panel_windowed.tscn")
# const GDServer = preload("res://addons/GDSyncer/scenes/Server.tscn")

# var main_panel_instance
# var server


func _enter_tree() -> void:
	init_properties()
	init_interface()
	
	server = GDServer.instantiate()
	
	add_tool_menu_item(_get_plugin_name(), func(): _make_visible())
	
	# var code_editor := get_editor_interface().get_script_editor().get_current_editor().get_base_editor() as CodeEdit
	# 
	# print(code_editor.get_caret_count())


func _exit_tree() -> void:
	get_editor_interface().get_base_control().remove_child(main_panel_instance)
	remove_tool_menu_item(_get_plugin_name())
	
	if main_panel_instance:
		main_panel_instance.queue_free()
	server.shutdown_sync()


func init_interface() -> void:
	main_panel_instance = MainPanel.instantiate()
	
	var main_panel_temp = main_panel_instance.find_child("MainPanel")
	main_panel_temp.set_vars(SERVER_ADDRESS, SERVER_PASSWORD)
	main_panel_temp.connect("start_called", func(): server.start_or_shutdown_sync())
	main_panel_instance.title = _get_plugin_name()
	main_panel_instance.connect("close_requested", func(): _make_visible(false))
	
	_make_visible(false)
	get_editor_interface().get_base_control().add_child(main_panel_instance)
	


func _make_visible(visible: bool = true) -> void:
	if main_panel_instance:
		main_panel_instance.visible = visible


func init_properties() -> void:
	set_setting_with_initial_value(
		SERVER_ADDRESS,
		SERVER_ADDRESS_DEFAULT,
		{
			"name": SERVER_ADDRESS,
			"type": TYPE_STRING,
			"hint": PROPERTY_HINT_NONE,
			"hint_string": ""
		}
	)
	
	var err: int = ProjectSettings.save()
	if err:
		push_error("[GSyncer] An error occured while trying to save config: %s" % error_string(err))


func set_setting_with_initial_value(setting: String, value: Variant, property_info: Dictionary = {}) -> void:
	if not ProjectSettings.has_setting(setting):
		ProjectSettings.set_setting(setting, value)
	if not property_info.is_empty():
		ProjectSettings.add_property_info(property_info)
	ProjectSettings.set_initial_value(setting, value)


func _get_plugin_name():
	return "GDSyncer"
	
